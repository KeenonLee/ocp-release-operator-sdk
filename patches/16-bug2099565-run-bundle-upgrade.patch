diff -up ./internal/olm/operator/registry/index_image.go.bug2099565 ./internal/olm/operator/registry/index_image.go
--- ./internal/olm/operator/registry/index_image.go.bug2099565	2022-06-21 13:40:17.600614233 -0400
+++ ./internal/olm/operator/registry/index_image.go	2022-06-21 13:41:01.012708024 -0400
@@ -240,12 +240,10 @@ func upgradeFBC(ctx context.Context, f *
 	if err != nil {
 		return nil, err
 	}
-
 	// Ensuring a valid bundle size
 	if len(declcfg.Bundles) < 1 {
 		return nil, fmt.Errorf("bundle image should contain at least one bundle blob")
 	}
-
 	// Checking if the existing file-based catalog (before upgrade) contains the bundle and channel that we intend to insert.
 	// If the bundle already exists, we error out. If the channel already exists, we store the index of the channel. This
 	// index will be used to access the channel from the declarative config object
@@ -265,29 +263,25 @@ func upgradeFBC(ctx context.Context, f *
 				}
 			}
 			channelHead, err = getChannelHead(channel.Entries)
-
 			if err != nil {
 				return nil, err
 			}
-
 			break // We only want to search through the specific channel
 		}
 	}
-
 	// Storing a list of the existing bundles and their packages for easier querying via maps
 	existingBundles := make(map[string]string)
 	for _, bundle := range originalDeclCfg.Bundles {
 		existingBundles[bundle.Name] = bundle.Package
 	}
-
+	extraDeclConfig := &declarativeconfig.DeclarativeConfig{}
 	// declcfg contains all the bundles we need to insert to form the new FBC
 	entries := []declarativeconfig.ChannelEntry{} // Used when generating a new channel
 	for i, bundle := range declcfg.Bundles {
 		// if it is not present in the bundles array or belongs to a different package, we can add it
 		if _, present := existingBundles[bundle.Name]; !present || existingBundles[bundle.Name] != bundle.Package {
-			originalDeclCfg.Bundles = append(originalDeclCfg.Bundles, bundle)
+			extraDeclConfig.Bundles = append(extraDeclConfig.Bundles, bundle)
 		}
-
 		// constructing a new entry to add
 		entry := declarativeconfig.ChannelEntry{
 			Name: declcfg.Bundles[i].Name,
@@ -297,25 +291,23 @@ func upgradeFBC(ctx context.Context, f *
 		} else if channelExists {
 			entry.Replaces = channelHead
 		}
-
 		// either add it to a new channel or an existing channel
 		if channelExists {
-			originalDeclCfg.Channels[channelIndex].Entries = append(originalDeclCfg.Channels[channelIndex].Entries, entry)
+			extraDeclConfig.Channels[channelIndex].Entries = []declarativeconfig.ChannelEntry{entry}
 		} else {
 			entries = append(entries, entry)
 		}
 	}
-
 	// create a new channel if it does not exist
 	if !channelExists {
-		originalDeclCfg.Channels = append(originalDeclCfg.Channels, declarativeconfig.Channel{
+		channel := declarativeconfig.Channel{
 			Schema:  fbcutil.SchemaChannel,
 			Name:    f.ChannelName,
 			Package: f.Package,
 			Entries: entries,
-		})
+		}
+		extraDeclConfig.Channels = []declarativeconfig.Channel{channel}
 	}
-
 	// check if package already exists
 	packagePresent := false
 	for _, packageName := range originalDeclCfg.Packages {
@@ -324,17 +316,16 @@ func upgradeFBC(ctx context.Context, f *
 			break
 		}
 	}
-
 	// only add the new package if it does not already exist
 	if !packagePresent {
-		originalDeclCfg.Packages = append(originalDeclCfg.Packages, declarativeconfig.Package{
+		packageBlob := declarativeconfig.Package{
 			Schema:         fbcutil.SchemaPackage,
 			Name:           f.Package,
 			DefaultChannel: f.ChannelName,
-		})
+		}
+		extraDeclConfig.Packages = []declarativeconfig.Package{packageBlob}
 	}
-
-	return originalDeclCfg, nil
+	return extraDeclConfig, nil
 }
 
 // UpdateCatalog links a new registry pod in catalog source by updating the address and annotations,
